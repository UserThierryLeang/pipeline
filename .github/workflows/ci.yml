name: Deploy to AWS

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # √âvite les jobs bloqu√©s
    steps:
      # √âtape 1: Checkout du code
      - uses: actions/checkout@v4

      # √âtape 2: Configuration SSH (avec meilleure gestion des erreurs)
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 --decode > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
          chmod 600 ~/.ssh/known_hosts
          echo "Cl√© SSH configur√©e pour ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"

      # √âtape 3: Test de connexion am√©lior√©
      - name: Validate SSH connection
        run: |
          if ! ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo '‚úÖ Connexion SSH valid√©e'"; then
            echo "::error::√âchec de la connexion SSH"
            exit 1
          fi

      # √âtape 4: D√©ploiement avec gestion d'erreur d√©taill√©e
      - name: Pull and deploy
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            set -e
            echo 'üìÇ Acc√®s √† ${{ secrets.WORK_DIR }}...'
            cd ${{ secrets.WORK_DIR }} || { echo '::error::R√©pertoire introuvable'; exit 1; }
            
            echo 'üîÑ Mise √† jour du code...'
            git pull origin main || { echo '::error::√âchec du git pull'; exit 1; }
            
            echo 'üê≥ Arr√™t des containers...'
            docker-compose down || true  # Continue m√™me si √©chec
            
            echo 'üöÄ Lancement des containers...'
            docker-compose up -d --build || { echo '::error::√âchec du docker-compose'; exit 1; }
            
            echo '‚úÖ D√©ploiement r√©ussi!'
          "

      # √âtape 5: Nettoyage syst√©matique
      - name: Cleanup
        if: always()
        run: |
          rm -vf ~/.ssh/id_rsa ~/.ssh/known_hosts
          echo "Nettoyage effectu√©"